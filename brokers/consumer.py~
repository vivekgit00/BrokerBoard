from channels.generic.websocket import AsyncJsonWebsocketConsumer  # ✅ Use JsonConsumer to support send_json
import asyncio
from .delta_client import SUBSCRIPTIONS, ACTIVE_SYMBOLS, delta_socket_worker  # ✅ Single import location
from asgiref.sync import sync_to_async
import logging

logger = logging.getLogger(__name__)

class DeltaConsumer(AsyncJsonWebsocketConsumer):  # ✅ Use this for send_json to work
    async def connect(self):
        self.symbols = set()  # ✅ Track subscribed symbols per client
        await self.accept()
        await self.send_json({
            "message": "connected",
            "channel": self.channel_name
        })
        await sync_to_async(logger.info)(f"WebSocket connected: {self.channel_name}")

    async def disconnect(self, code):
        for symbol in self.symbols:
            SUBSCRIPTIONS[symbol].discard(self)
        await sync_to_async(logger.info)(f"WebSocket disconnected: {self.channel_name}")

    async def receive_json(self, content):
        action = content.get("action")
        symbol = content.get("symbol")

        if action == "subscribe" and symbol:
            SUBSCRIPTIONS[symbol].add(self)
            self.symbols.add(symbol)
            asyncio.create_task(delta_socket_worker(symbol))
            await self.send_json({
                "message": f"Subscribed to {symbol}"
            })
